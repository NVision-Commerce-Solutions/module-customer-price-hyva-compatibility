<?php
/** @var \Commerce365\CustomerPrice\ViewModel\CustomerPrice $block */

$viewModel = $block->getData('viewModel'); ?>
<?php if ($viewModel->isLoggedIn() && $viewModel->isAjaxEnabled()): ?>
    <script>
        window.customerpriceConfig = <?= $viewModel->getConfig() ?>;
        window.preselectConfigurable = <?= (int) $viewModel->preselectConfigurable() ?>;
        window.customerpriceConfig.optionPrices = [];
        window.customerpriceConfig.prices = [];
        window.customerpriceConfig.tierPricesPerUom = [];
        window.customerpriceConfig.selectedTierPriceInfo = [];
        function initCommerce365CustomerPrice() {
            return {
                sectionData: null,

                hyvaCustomerPrice(sectionData) {
                    this.sectionData = sectionData;
                    this.createMutationObserver();
                    this.run();
                },

                run: function(container = null) {
                    let payload = this.collectPayload(container);
                    if (!parseInt(payload.length)) return;

                    this.makePriceCall(payload);
                },

                async makePriceCall(payload) {
                    let self = this;
                    const postUrl = BASE_URL + 'rest/V1/customer-price/';
                    const response = await fetch(postUrl, {
                        method: 'POST',
                        body: JSON.stringify({
                            productInfo: payload,
                            storeId: window.customerpriceConfig.storeId,
                            productId: window.customerpriceConfig.productId
                        }),
                        headers: {
                            'Content-Type': 'application/json',
                            "X-Requested-With": "XMLHttpRequest",
                        }
                    });
                    if (!response.ok) {
                        const message = `An error has occured: ${response.status}`;
                        throw new Error(message);
                    }
                    const responseData = await response.json();
                    responseData.forEach(productInfo => {
                        try {
                            self.updatePrices(productInfo);
                        } catch (e) {
                            console.error(e);
                        }
                    });
                },
                updatePrices: function(productInfo) {
                    if (productInfo.configurableConfig) {
                        window.customerpriceConfig.tierPricesPerUom = JSON.parse(productInfo.tierPricesPerUom);
                        this.processConfigurable(productInfo.configurableConfig, productInfo.productId);
                    } else if(window.customerpriceConfig.productId && window.customerpriceConfig.productId == productInfo.productId && productInfo.priceConfig) {
                        window.customerpriceConfig.selectedTierPriceInfo = JSON.parse(productInfo.tierPricesPerUom)[productInfo.productId];
                        document.querySelectorAll(".price-box").forEach(element => {
                            const productId = this.getElementProductId(element);
                            if (!productId) return;

                            let config = this.preparePriceConfig(productInfo);
                            const detail = { "detail" : config.prices };
                            const qty = document.getElementById('qty[' + productId + ']').value;
                            if (qty > 1) {
                                window.dispatchEvent(new CustomEvent("update-qty-" + productId, {"detail": qty}));
                            }
                            window.dispatchEvent(new CustomEvent("update-prices-" + productId, detail));
                            if (typeof config.uomPrice === 'object' && Object.keys(config.uomPrice).length) {
                                window.uomDetail = { "detail": config.uomPrice };
                            }

                            this.processTierPrices(productInfo);
                        });
                    }

                    if (!window.customerpriceConfig.productId || window.customerpriceConfig.productId !== productInfo.productId) {
                        document.querySelectorAll("[data-price-box=product-id-" + productInfo.productId + "]").forEach(element => {
                            element.outerHTML = productInfo.priceHtml;
                        });
                    }
                },

                preparePriceConfig: function(productInfo) {
                    let config = JSON.parse(productInfo.priceConfig);
                    config.prices.isMinimalPrice = true;
                    config.prices.tierPrices = config.tierPrices;

                    return config;
                },

                processTierPrices: function(productInfo) {
                    if (!productInfo.tierPriceHtml) return;
                    // Make sure to not render this a second time
                    if (document.getElementById('customer-tier-price')) return;

                    const tierPriceElement = document.createElement('div');
                    tierPriceElement.classList.add('py-4', 'my-2', 'tier-price-container');
                    tierPriceElement.innerHTML = productInfo.tierPriceHtml;
                    document.getElementById("add-to-compare").parentNode.after(tierPriceElement);
                },

                getElementProductId: function(element) {
                   const xData = element.getAttribute('x-data');
                   if (!xData) return;

                   let productId = element.getAttribute('x-data').match(/\d+/g);
                   if (!productId || !productId.length) return;
                   [productId] = productId;

                   return productId;
                },

                collectPayload: function (container = null) {
                    let payload = [];
                    container = container ?? document;
                    if (window.customerpriceConfig.productId) {
                        container.querySelectorAll(".price-box").forEach(element => {
                            const productId = this.getElementProductId(element);
                            if (!productId) return;
                            payload.push(productId);
                        });
                    }

                    container.querySelectorAll("[data-role=priceBox]").forEach(element => {
                        payload.push(element.getAttribute('data-product-id'));
                    });

                    return payload;
                },

                processConfigurable: function (config, productId) {
                    if (!config) return;

                    config = JSON.parse(config);
                    window.customerpriceConfig.prices = config.prices;

                    Object.keys(config.optionPrices).forEach(key =>
                        window.customerpriceConfig.optionPrices[key] = config.optionPrices[key]
                    );
                    if (window.customerpriceConfig.productId && window.customerpriceConfig.productId === productId) {
                        config.prices.isMinimalPrice = true;
                        if (!config.prices.tierPrices) {
                            config.prices.tierPrices = [];
                        }
                        let detail = { detail : config.prices };
                        window.dispatchEvent(new CustomEvent("update-initial-price-" + productId, {detail: config.prices.finalPrice.amount}));
                        window.dispatchEvent(new CustomEvent("update-prices-" + productId, detail));
                        if (window.preselectConfigurable) {
                            const swatch = document.querySelector('.swatch-attribute-options .swatch-option');
                            if (swatch) swatch.click();
                        }
                    }
                },

                createMutationObserver: function() {
                    const self = this;
                    var mutationObserver = new MutationObserver(function(mutations) {
                        mutations.forEach(function(mutation) {
                            mutation.addedNodes.forEach(function (addedNode) {
                                if (addedNode instanceof Node && 'querySelectorAll' in addedNode
                                    && addedNode.classList.value !== 'price-box price-final_price') {
                                    self.run(addedNode);
                                }
                            });
                        });
                    });
                    const productsContainer = document.querySelector('div.column.main');
                    mutationObserver.observe(productsContainer, {
                        attributes: true,
                        characterData: true,
                        childList: true,
                        subtree: true,
                        attributeOldValue: true,
                        characterDataOldValue: true
                    });
                }
            }
        }

        window.initConfigurableOptions = new Proxy(window.initConfigurableOptions , {
            // Declare function interceptor on the proxy handler object
            apply(target, objContext, args) {
                const instance = target.apply(objContext, args);

                // Wrap instance hide method in a Proxy
                instance.updatePrices = new Proxy(instance.updatePrices, {

                    // Declare function interceptor on the proxy handler object
                    apply(target, objContext, args) {
                        const value = instance.productIndex ?
                            window.customerpriceConfig.optionPrices[instance.productIndex] :
                            window.customerpriceConfig.prices;
                        window.customerpriceConfig.selectedTierPriceInfo = window.customerpriceConfig.tierPricesPerUom[instance.productIndex];
                        if (value === undefined || value.length === 0) return target.apply(objContext, args);
                        window.dispatchEvent(
                            new CustomEvent(
                                "update-prices-" + instance.productId,
                                {
                                    detail: Object.assign(
                                        value,
                                        { isMinimalPrice: instance.calculateIsMinimalPrice() }
                                    )
                                }
                            )
                        );
                        window.uomDetail = {detail: value.uomPrice};
                        instance.applyUomPirce(value.uomPrice);
                    }
                });

                instance.applyUomPirce = function (uomPrice) {
                    if (!uomPrice) {
                        return;
                    }

                    if (window.customerpriceConfig.productId === instance.productId) {
                        window.dispatchEvent(
                            new CustomEvent("update-uom-price-" + instance.productId, { detail: uomPrice})
                        );
                    } else {
                        let priceUomElement = document.getElementById('price-per-uom-' + instance.productId);
                        if (priceUomElement) {
                            priceUomElement.innerHTML = uomPrice.pricePerUOM + '/' + uomPrice.UOM;
                        } else {
                            const container = document.querySelector('[data-product-id="' + instance.productId + '"] .price-wrapper');
                            if (!container) {
                                return;
                            }
                            priceUomElement = document.createElement('div');
                            priceUomElement.classList.add('commerce365-price-per-uom');
                            priceUomElement.setAttribute('id', 'price-per-uom-' + instance.productId);
                            priceUomElement.innerHTML = uomPrice.pricePerUOM + '/' + uomPrice.UOM;
                            container.parentNode.after(priceUomElement);
                        }
                    }
                }
                return instance;
            }
        })
    </script>
<div
    x-data="initCommerce365CustomerPrice()"
    @private-content-loaded.window="hyvaCustomerPrice($event.detail.data)"
></div>
<?php endif; ?>
