<?php
/** @var \Commerce365\CustomerPrice\ViewModel\CustomerPrice $block */

$viewModel = $block->getData('viewModel'); ?>
<?php if ($viewModel->isLoggedIn() && $viewModel->isAjaxEnabled()): ?>
    <script>
        window.customerpriceConfig = <?= $viewModel->getConfig() ?>;
        window.customerpriceConfig.optionPrices = [];
        window.customerpriceConfig.prices = [];
        function initCommerce365CustomerPrice() {
            return {
                hyvaCustomerPrice(sectionData) {
                    let payload = this.collectPayload();
                    if (!parseInt(payload.length)) return;

                    let customer = sectionData.customer;
                    if (customer.price_token) {
                        this.makePriceCall(payload, customer.price_token);
                    }
                },
                async makePriceCall(payload, priceToken) {
                    let self = this;
                    const postUrl = BASE_URL + 'rest/V1/customer-price/';
                    const response = await fetch(postUrl, {
                        method: 'POST',
                        body: JSON.stringify({
                            productInfo: payload,
                            storeId: window.customerpriceConfig.storeId,
                            customerToken: priceToken,
                            productId: window.customerpriceConfig.productId
                        }),
                        headers: {
                            'Content-Type': 'application/json',
                            "X-Requested-With": "XMLHttpRequest",
                        }
                    });
                    if (!response.ok) {
                        const message = `An error has occured: ${response.status}`;
                        throw new Error(message);
                    }
                    const responseData = await response.json();
                    responseData.forEach(productInfo => {
                        try {
                            self.updatePrices(productInfo);
                        } catch (e) {
                            console.error(e);
                        }
                    });
                },
                updatePrices: function(productInfo) {
                    if (productInfo.configurableConfig) {
                        this.processConfigurable(productInfo.configurableConfig, productInfo.productId);
                    } else if(window.customerpriceConfig.productId && window.customerpriceConfig.productId == productInfo.productId && productInfo.priceConfig) {
                        document.querySelectorAll(".price-box").forEach(element => {
                            const productId = this.getElementProductId(element);
                            if (!productId) return;

                            config = JSON.parse(productInfo.priceConfig);
                            config.prices.isMinimalPrice = true;
                            config.prices.tierPrices = config.tierPrices;
                            const detail = { "detail" : config.prices };
                            const qty = document.getElementById('qty[' + productId + ']').value;
                            if (qty > 1) {
                                window.dispatchEvent(new CustomEvent("update-qty-" + productId, {"detail": qty}));
                            }
                            window.dispatchEvent(new CustomEvent("update-prices-" + productId, detail));

                            this.processTierPrices(productInfo);
                        });
                    }

                    document.querySelectorAll("[data-price-box=product-id-" + productInfo.productId + "]").forEach(element => {
                        element.outerHTML = productInfo.priceHtml;
                    });
                },

                processTierPrices: function(productInfo) {
                    if (!productInfo.tierPriceHtml) return;
                    // Make sure to not render this a second time
                    if (document.getElementById('customer-tier-price')) return;

                    const tierPriceElement = document.createElement('div');
                    tierPriceElement.classList.add('py-4', 'my-2', 'tier-price-container');
                    tierPriceElement.innerHTML = productInfo.tierPriceHtml;
                    document.getElementById("add-to-compare").parentNode.after(tierPriceElement);
                },

                getElementProductId: function(element) {
                   const xData = element.getAttribute('x-data');
                   if (!xData) return;

                   let productId = element.getAttribute('x-data').match(/\d+/g);
                   if (!productId || !productId.length) return;
                   [productId] = productId;

                   return productId;
                },

                collectPayload: function () {
                    let payload = [];
                    if (window.customerpriceConfig.productId) {
                        document.querySelectorAll(".price-box").forEach(element => {
                            const productId = this.getElementProductId(element);
                            if (!productId) return;
                            payload.push(productId);
                        });
                    }

                    document.querySelectorAll("[data-role=priceBox]").forEach(element => {
                        payload.push(element.getAttribute('data-product-id'));
                    });

                    return payload;
                },

                processConfigurable: function (config, productId) {
                    if (!config) return;

                    config = JSON.parse(config);
                    window.customerpriceConfig.prices = config.prices;

                    Object.keys(config.optionPrices).forEach(key =>
                        window.customerpriceConfig.optionPrices[key] = config.optionPrices[key]
                    );
                    if (window.customerpriceConfig.productId && window.customerpriceConfig.productId === productId) {
                        config.prices.isMinimalPrice = true;
                        const detail = { "detail" : config.prices };
                        window.dispatchEvent(new CustomEvent("update-initial-price-" + productId, {detail: config.prices.finalPrice.amount}));
                        window.dispatchEvent(new CustomEvent("update-prices-" + productId, detail));
                    }
                },
            }
        }

        window.initConfigurableOptions = new Proxy(window.initConfigurableOptions , {
            // Declare function interceptor on the proxy handler object
            apply(target, objContext, args) {
                const instance = target.apply(objContext, args);

                // Wrap instance hide method in a Proxy
                instance.updatePrices = new Proxy(instance.updatePrices, {

                    // Declare function interceptor on the proxy handler object
                    apply(target, objContext, args) {
                        const value = instance.productIndex ?
                            window.customerpriceConfig.optionPrices[instance.productIndex] :
                            window.customerpriceConfig.prices;
                        if (value === undefined || value.length === 0) return target.apply(objContext, args);
                        window.dispatchEvent(
                            new CustomEvent(
                                "update-prices-" + instance.productId,
                                {
                                    detail: Object.assign(
                                        value,
                                        { isMinimalPrice: instance.calculateIsMinimalPrice() }
                                    )
                                }
                            )
                        );
                    }
                });
                return instance;
            }
        })
    </script>
<div
    x-data="initCommerce365CustomerPrice()"
    @private-content-loaded.window="hyvaCustomerPrice($event.detail.data)"
></div>
<?php endif; ?>
